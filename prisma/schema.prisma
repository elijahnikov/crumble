generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// -----------------------------------------------------------------------------//
// ------------------------------ Next Auth ------------------------------------//
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -----------------------------------------------------------------------------//
// ---------------------------------- User -------------------------------------//
model User {
    id                 String    @id @default(cuid())
    name               String?
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    header             String?
    verified           Boolean?
    displayName        String?
    bio                String?
    bioLink            String?
    usernameChangeDate DateTime?

    totalFilmsWatched Int @default(0)
    totalHoursWatched Int @default(0)
    totalListsCreated Int @default(0)
    followers         Int @default(0)
    following         Int @default(0)

    // Relationships
    accounts Account[]
    sessions Session[]

    // Non-Next Auth
    reviews     Review[]
    reviewLikes ReviewLike[]
}

// -----------------------------------------------------------------------------//
// -------------------------------- Reviews ------------------------------------//
model Review {
    id               String    @id @default(cuid())
    movieId          Int
    userId           String
    text             String
    containsSpoilers Boolean   @default(false)
    tags             String?
    moviePoster      String?
    backdrop         String?
    movieTitle       String
    movieReleaseYear String
    ratingGiven      Float     @default(0)
    score            Int?      @default(0)
    watchedOn        DateTime?
    noOfComments     Int?      @default(0)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    // Relationships
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    reviewLikes ReviewLike[]

    @@unique([createdAt, id])
    @@index([userId])
}

model ReviewLike {
    userId   String
    reviewId String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

    @@id([userId, reviewId])
    @@index([userId])
    @@index([reviewId])
}
