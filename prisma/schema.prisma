generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

//-----------------------------------------------------------------
//----------------------------- User ------------------------------
//-----------------------------------------------------------------
model User {
  id                 String              @id @default(cuid())
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  name               String?
  bio                String?
  bioLink            String?
  displayName        String?
  header             String?
  totalHoursWatched  Int                 @default(0)
  totalListsCreated  Int                 @default(0)
  usernameChangeDate DateTime?
  verified           Boolean?
  totalMoviesWatched Int                 @default(0)

  // relations
  accounts           Account[]
  sessions           Session[]
  reviews            Review[]
  reviewLikes        ReviewLike[]
  reviewComments     ReviewComment[]
  reviewCommentLikes  ReviewCommentLike[]
  watched            Watched[]

  lists          List[]
  listComments   ListComment[]
  listLikes        ListLike[]
  listCommentLikes ListCommentLike[]

  followers Subscription[] @relation("following")
  following Subscription[] @relation("follower")
}

//-----------------------------------------------------------------
//---------------------------- Review -----------------------------
//-----------------------------------------------------------------
model Review {
  id               String          @id @default(cuid())
  movieId          Int
  text             String          @db.LongText
  containsSpoilers Boolean         @default(false)
  tags             String?
  moviePoster      String?
  backdrop         String?
  movieTitle       String
  movieReleaseYear String
  ratingGiven      Float           @default(0)
  watchedOn        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String

  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewLikes      ReviewLike[]
  reviewComments   ReviewComment[]

  @@unique([createdAt, id])
  @@index([userId])
}

model ReviewLike {
  userId   String
  reviewId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@id([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model ReviewComment {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review             Review              @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewCommentLikes ReviewCommentLike[]

  @@unique([createdAt, id])
  @@index([reviewId])
  @@index([userId])
}

model ReviewCommentLike {
  userId          String
  reviewCommentId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewComment   ReviewComment @relation(fields: [reviewCommentId], references: [id], onDelete: Cascade)

  @@id([userId, reviewCommentId])
  @@index([userId])
  @@index([reviewCommentId])
}

model ReviewTag {
  id        String   @id @default(cuid())
  text      String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//-----------------------------------------------------------------
//--------------------------- Movies ------------------------------
//-----------------------------------------------------------------
model Movie {
  id              String   @id @default(cuid())
  movieId         Int      @unique
  title           String
  overview        String?  @db.Text
  poster          String?
  backdrop        String?
  releaseDate     String
  numberOfRatings Int      @default(0)
  rating          Float    @default(0.0) @db.Float
  watchedCount    Int      @default(0)
  listCount       Int      @default(0)
  likeCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  ListEntries ListEntry[]
}

//-----------------------------------------------------------------
//--------------------------- Watched -----------------------------
//-----------------------------------------------------------------
model Watched {
  id          String   @id @default(cuid())
  movieId     Int
  userId      String
  movieTitle  String
  poster      String?
  ratingGiven Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([createdAt, id])
  @@unique([userId, movieId])
  @@index([userId])
}

//-----------------------------------------------------------------
//----------------------------- List ------------------------------
//-----------------------------------------------------------------
model List {
  id String @id @default(cuid())
  userId String
  title String
  description String?
  tags String?
  numberOfFilms Int @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
    user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  listComments   ListComment[]
    listLikes      ListLike[]
    listEntries   ListEntry[]


  @@unique([createdAt, id])
  @@index([userId])
}

model ListLike {
    userId   String
  listId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
  @@index([userId])
  @@index([listId])
}

model ListComment {
  id        String   @id @default(cuid())
  userId    String
  listId    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  list             List              @relation(fields: [listId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  listCommentLikes ListCommentLike[]

  @@unique([createdAt, id])
  @@index([listId])
  @@index([userId])
}

model ListCommentLike {
  userId          String
  listCommentId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listComment   ListComment @relation(fields: [listCommentId], references: [id], onDelete: Cascade)

  @@id([userId, listCommentId])
  @@index([userId])
  @@index([listCommentId])
}

model ListTags {  
  id String @id @default(cuid())
  text String
  count Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListEntry {
  id String @id @default(cuid())

  movieId Int
  listId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  movie     Movie    @relation(fields: [movieId], references: [movieId], onDelete: Cascade)
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  @@index([listId])
  @@index([movieId])
}

//-----------------------------------------------------------------
//------------------------- Subscription --------------------------
//-----------------------------------------------------------------
model Subscription { 
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}