generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

//-----------------------------------------------------------------
//----------------------------- User ------------------------------
//-----------------------------------------------------------------
model User {
  id                 String    @id @default(cuid())
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  name               String?   @db.Text
  bio                String?
  bioLink            String?
  displayName        String?
  header             String?   @db.Text
  totalHoursWatched  Int       @default(0)
  totalListsCreated  Int       @default(0)
  usernameChangeDate DateTime?
  verified           Boolean?  @default(false)
  dev                Boolean?  @default(false)
  totalMoviesWatched Int       @default(0)

  // relations
  accounts Account[]
  sessions Session[]

  reviews            Review[]
  reviewLikes        ReviewLike[]
  reviewComments     ReviewComment[]
  reviewCommentLikes ReviewCommentLike[]

  watched         Watched[]
  favouriteMovies FavouriteMovies[]

  activity Activity[]

  lists            List[]
  listComments     ListComment[]
  listLikes        ListLike[]
  listCommentLikes ListCommentLike[]

  privacy Privacy[]

  followers Subscription[] @relation("following")
  following Subscription[] @relation("follower")

  notifier Notification[] @relation("notifier")
  notified Notification[] @relation("notified")
}

//-----------------------------------------------------------------
//---------------------------- Review -----------------------------
//-----------------------------------------------------------------
model Review {
  id               String    @id @default(cuid())
  movieId          Int
  text             String    @db.LongText
  containsSpoilers Boolean   @default(false)
  tags             String?
  moviePoster      String?
  backdrop         String?
  movieTitle       String
  movieReleaseYear String
  ratingGiven      Float     @default(0)
  watchedOn        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewLikes    ReviewLike[]
  reviewComments ReviewComment[]
  activity       Activity[]      @relation("review")
  notification   Notification[]

  @@unique([createdAt, id])
  @@index([userId])
}

model ReviewLike {
  userId       String
  reviewId     String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  review       Review         @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  notification Notification[]

  @@id([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model ReviewComment {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review             Review              @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewCommentLikes ReviewCommentLike[]
  notification       Notification[]

  @@unique([createdAt, id])
  @@index([reviewId])
  @@index([userId])
}

model ReviewCommentLike {
  userId          String
  reviewCommentId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewComment   ReviewComment @relation(fields: [reviewCommentId], references: [id], onDelete: Cascade)

  @@id([userId, reviewCommentId])
  @@index([userId])
  @@index([reviewCommentId])
}

model ReviewTag {
  id        String   @id @default(cuid())
  text      String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//-----------------------------------------------------------------
//--------------------------- Movies ------------------------------
//-----------------------------------------------------------------
model Movie {
  id              String   @id @default(cuid())
  movieId         Int      @unique
  title           String
  overview        String?  @db.Text
  poster          String?
  backdrop        String?
  releaseDate     String
  numberOfRatings Int      @default(0)
  rating          Float    @default(0.0) @db.Float
  watchedCount    Int      @default(0)
  listCount       Int      @default(0)
  likeCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  FavouriteMovies FavouriteMovies[]
  ListEntries     ListEntry[]
}

model FavouriteMovies {
  id      String @id @default(cuid())
  movieId Int
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie   Movie  @relation(fields: [movieId], references: [movieId], onDelete: Cascade)

  activity Activity[] @relation("favouriteMovie")

  @@unique([movieId, userId])
  @@index([userId])
  @@index([movieId])
}

//-----------------------------------------------------------------
//--------------------------- Watched -----------------------------
//-----------------------------------------------------------------
model Watched {
  id          String   @id @default(cuid())
  movieId     Int
  userId      String
  movieTitle  String
  poster      String?
  ratingGiven Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activity Activity[] @relation("watched")

  @@unique([createdAt, id])
  @@unique([userId, movieId])
  @@index([userId])
}

//-----------------------------------------------------------------
//----------------------------- List ------------------------------
//-----------------------------------------------------------------
model List {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String?
  tags          String?
  numberOfFilms Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listComments ListComment[]
  listLikes    ListLike[]
  listEntries  ListEntry[]
  activity     Activity[]    @relation("list")

  @@unique([createdAt, id])
  @@index([userId])
}

model ListLike {
  userId String
  listId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@id([userId, listId])
  @@index([userId])
  @@index([listId])
}

model ListComment {
  id        String   @id @default(cuid())
  userId    String
  listId    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list             List              @relation(fields: [listId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  listCommentLikes ListCommentLike[]

  @@unique([createdAt, id])
  @@index([listId])
  @@index([userId])
}

model ListCommentLike {
  userId        String
  listCommentId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  listComment   ListComment @relation(fields: [listCommentId], references: [id], onDelete: Cascade)

  @@id([userId, listCommentId])
  @@index([userId])
  @@index([listCommentId])
}

model ListTags {
  id        String   @id @default(cuid())
  text      String
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListEntry {
  id String @id @default(cuid())

  movieId   Int
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activity Activity[] @relation("listEntry")

  movie Movie @relation(fields: [movieId], references: [movieId], onDelete: Cascade)
  list  List  @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
  @@index([movieId])
}

//-----------------------------------------------------------------
//------------------------- Subscription --------------------------
//-----------------------------------------------------------------
model Subscription {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  notification Notification[]

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
  @@unique([followingId, followerId])
  @@index([followingId])
  @@index([followerId])
}

//-----------------------------------------------------------------
//--------------------------- Activity ----------------------------
//-----------------------------------------------------------------
model Activity {
  id     String @id @default(cuid())
  action String

  review   Review? @relation("review", fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String?

  favouriteMovie   FavouriteMovies? @relation("favouriteMovie", fields: [favouriteMovieId], references: [id], onDelete: Cascade)
  favouriteMovieId String?

  watched   Watched? @relation("watched", fields: [watchedId], references: [id], onDelete: Cascade)
  watchedId String?

  list   List?   @relation("list", fields: [listId], references: [id], onDelete: Cascade)
  listId String?

  listEntry   ListEntry? @relation("listEntry", fields: [listEntryId], references: [id], onDelete: Cascade)
  listEntryId String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([createdAt, id])
  @@index([userId])
  @@index([listId])
  @@index([watchedId])
  @@index([favouriteMovieId])
  @@index([reviewId])
  @@index([listEntryId])
}

//-----------------------------------------------------------------
//------------------------- Notification --------------------------
// //-----------------------------------------------------------------
model Notification {
  id String @id @default(cuid())

  followerId  String?
  followingId String?
  follow      Subscription? @relation(fields: [followerId, followingId], references: [followerId, followingId], onDelete: Cascade)

  userId     String?
  reviewId   String?
  review     Review?     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewLike ReviewLike? @relation(fields: [userId, reviewId], references: [userId, reviewId], onDelete: Cascade)

  reviewCommentId String?
  reviewComment   ReviewComment? @relation(fields: [reviewCommentId], references: [id], onDelete: Cascade)

  notifiedId String
  notified   User   @relation("notified", fields: [notifiedId], references: [id], onDelete: Cascade)
  notifierId String
  notifier   User   @relation("notifier", fields: [notifierId], references: [id], onDelete: Cascade)

  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([createdAt, id])
  @@index([followerId, followingId])
  @@index([notifierId])
  @@index([notifiedId])
  @@index([userId, reviewId])
  @@index([reviewId])
  @@index([reviewCommentId])
}

//-----------------------------------------------------------------
//---------------------------- Privacy ----------------------------
//-----------------------------------------------------------------
model Privacy {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  privateAccount               Boolean @default(false)
  showListsInActivity          Boolean @default(true)
  showListEntryInActivity      Boolean @default(true)
  showWatchedInActivity        Boolean @default(true)
  showReviewInActivity         Boolean @default(true)
  showFavouriteMovieInActivity Boolean @default(true)

  @@index([userId])
}
