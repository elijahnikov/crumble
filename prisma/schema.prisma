generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  name               String?
  bio                String?
  bioLink            String?
  displayName        String?
  followers          Int                 @default(0)
  following          Int                 @default(0)
  header             String?
  totalHoursWatched  Int                 @default(0)
  totalListsCreated  Int                 @default(0)
  usernameChangeDate DateTime?
  verified           Boolean?
  totalMoviesWatched Int                 @default(0)
  accounts           Account[]
  sessions           Session[]
  reviews            Review[]
  reviewLikes        ReviewLike[]
  reviewComments     ReviewComment[]
  MovieList          MovieList[]
  ReviewCommentLike  ReviewCommentLike[]
  Watched            Watched[]
}

model Review {
  id               String          @id @default(cuid())
  movieId          Int
  text             String          @db.LongText
  containsSpoilers Boolean         @default(false)
  tags             String?
  moviePoster      String?
  backdrop         String?
  movieTitle       String
  movieReleaseYear String
  ratingGiven      Float           @default(0)
  watchedOn        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewLikes      ReviewLike[]
  reviewComments   ReviewComment[]

  @@unique([createdAt, id])
  @@index([userId])
}

model ReviewLike {
  userId   String
  reviewId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@id([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model ReviewComment {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review             Review              @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewCommentLikes ReviewCommentLike[]

  @@unique([createdAt, id])
  @@index([reviewId])
  @@index([userId])
}

model ReviewCommentLike {
  userId          String
  reviewCommentId String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewComment   ReviewComment @relation(fields: [reviewCommentId], references: [id], onDelete: Cascade)

  @@id([userId, reviewCommentId])
  @@index([userId])
  @@index([reviewCommentId])
}

model ReviewTag {
  id        String   @id @default(cuid())
  text      String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MovieList {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String
  tags            String?
  numberOfEntries Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Movie {
  id           String   @id @default(cuid())
  movieId      Int      @unique
  title        String
  overview     String?  @db.Text
  poster       String?
  backdrop     String?
  releaseDate  String
  rating       Int      @default(0)
  watchedCount Int      @default(0)
  listCount    Int      @default(0)
  likeCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Watched {
  id          String   @id @default(cuid())
  movieId     Int
  userId      String
  movieTitle  String
  poster      String?
  ratingGiven Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([createdAt, id])
  @@unique([userId, movieId])
  @@index([userId])
}
